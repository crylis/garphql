package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"log"
	"strconv"

	"main.go/graph/handlers"
	"main.go/graph/model"
)

// AddMember is the resolver for the addMember field.
func (r *mutationResolver) AddMember(ctx context.Context, id int, name string, position string, listName string, point int) (*model.Member, error) {
	strID := strconv.Itoa(id)
	newMember := &model.Member{
		ID:       strID,
		Name:     name,
		Position: model.PositionName(position),
		Worker:   []*model.List{{Name: listName, Point: point}},
	}

	// Add the new member to the list (assuming handlers.AddMember exists and appends the member to the list)
	handlers.AddMember(newMember)

	return newMember, nil
}

// EditMember is the resolver for the editMember field.
func (r *mutationResolver) EditMember(ctx context.Context, id int, name string, position string, listName string, point int) (*model.Member, error) {
	err := handlers.EditMember(id, name, model.PositionName(position), listName, point)
	if err != nil {
		return nil, err
	}
	return handlers.FindMemberByID(id)
}

// DeleteMember is the resolver for the deleteMember field.
func (r *mutationResolver) DeleteMember(ctx context.Context, id int) (bool, error) {
	err := handlers.DeleteMember(id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// GetMember is the resolver for the getMember field.
func (r *queryResolver) GetMember(ctx context.Context) ([]*model.Member, error) {
	return handlers.GetMember(), nil
}

// FindMember is the resolver for the findMember field.
func (r *queryResolver) FindMember(ctx context.Context, id int) (*model.Member, error) {
	member, err := handlers.FindMemberByID(id)
	if err != nil {
		log.Printf("Error finding member: %v", err)
		return nil, err
	}
	return member, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
