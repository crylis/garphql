// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type List struct {
	Name  string `json:"name"`
	Point int    `json:"point"`
}

type Member struct {
	ID       string       `json:"id"`
	Name     string       `json:"name"`
	Position PositionName `json:"position"`
	Worker   []*List      `json:"worker"`
}

type Mutation struct {
}

type Query struct {
}

type PositionName string

const (
	PositionNamePresident     PositionName = "President"
	PositionNameVicePresident PositionName = "VicePresident"
	PositionNameTreasurer     PositionName = "Treasurer"
	PositionNameSecretary     PositionName = "Secretary"
)

var AllPositionName = []PositionName{
	PositionNamePresident,
	PositionNameVicePresident,
	PositionNameTreasurer,
	PositionNameSecretary,
}

func (e PositionName) IsValid() bool {
	switch e {
	case PositionNamePresident, PositionNameVicePresident, PositionNameTreasurer, PositionNameSecretary:
		return true
	}
	return false
}

func (e PositionName) String() string {
	return string(e)
}

func (e *PositionName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PositionName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PositionName", str)
	}
	return nil
}

func (e PositionName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
